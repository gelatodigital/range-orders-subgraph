// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RangeOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RangeOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RangeOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RangeOrder", id.toString(), this);
  }

  static load(id: string): RangeOrder | null {
    return store.get("RangeOrder", id) as RangeOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(value as string));
    }
  }

  get tickThreshold(): BigInt {
    let value = this.get("tickThreshold");
    return value.toBigInt();
  }

  set tickThreshold(value: BigInt) {
    this.set("tickThreshold", Value.fromBigInt(value));
  }

  get zeroForOne(): boolean {
    let value = this.get("zeroForOne");
    return value.toBoolean();
  }

  set zeroForOne(value: boolean) {
    this.set("zeroForOne", Value.fromBoolean(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get expiryTime(): BigInt {
    let value = this.get("expiryTime");
    return value.toBigInt();
  }

  set expiryTime(value: BigInt) {
    this.set("expiryTime", Value.fromBigInt(value));
  }

  get amountIn(): BigInt | null {
    let value = this.get("amountIn");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt | null) {
    if (value === null) {
      this.unset("amountIn");
    } else {
      this.set("amountIn", Value.fromBigInt(value as BigInt));
    }
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get feeToken(): string {
    let value = this.get("feeToken");
    return value.toString();
  }

  set feeToken(value: string) {
    this.set("feeToken", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get maxFeeAmount(): BigInt {
    let value = this.get("maxFeeAmount");
    return value.toBigInt();
  }

  set maxFeeAmount(value: BigInt) {
    this.set("maxFeeAmount", Value.fromBigInt(value));
  }

  get feeAmount(): BigInt | null {
    let value = this.get("feeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("feeAmount");
    } else {
      this.set("feeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get amount0(): BigInt | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount0(value: BigInt | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigInt(value as BigInt));
    }
  }

  get amount1(): BigInt | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount1(value: BigInt | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigInt(value as BigInt));
    }
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get submittedTxHash(): Bytes {
    let value = this.get("submittedTxHash");
    return value.toBytes();
  }

  set submittedTxHash(value: Bytes) {
    this.set("submittedTxHash", Value.fromBytes(value));
  }

  get executedTxHash(): Bytes | null {
    let value = this.get("executedTxHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executedTxHash(value: Bytes | null) {
    if (value === null) {
      this.unset("executedTxHash");
    } else {
      this.set("executedTxHash", Value.fromBytes(value as Bytes));
    }
  }

  get cancelledTxHash(): Bytes | null {
    let value = this.get("cancelledTxHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelledTxHash(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelledTxHash");
    } else {
      this.set("cancelledTxHash", Value.fromBytes(value as Bytes));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get updatedAtBlock(): BigInt {
    let value = this.get("updatedAtBlock");
    return value.toBigInt();
  }

  set updatedAtBlock(value: BigInt) {
    this.set("updatedAtBlock", Value.fromBigInt(value));
  }

  get updatedAtBlockHash(): Bytes {
    let value = this.get("updatedAtBlockHash");
    return value.toBytes();
  }

  set updatedAtBlockHash(value: Bytes) {
    this.set("updatedAtBlockHash", Value.fromBytes(value));
  }
}
